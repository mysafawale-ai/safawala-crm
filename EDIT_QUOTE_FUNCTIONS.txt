// ADD THESE FUNCTIONS AFTER handleDownloadPDF (around line 427):

  // Open edit dialog and populate form
  const handleEditQuote = (quote: Quote) => {
    setSelectedQuote(quote)
    
    // Parse date and time from ISO strings
    const eventDateTime = quote.event_date ? new Date(quote.event_date) : null
    const deliveryDateTime = quote.delivery_date ? new Date(quote.delivery_date) : null
    const returnDateTime = quote.return_date ? new Date(quote.return_date) : null
    
    setEditFormData({
      event_type: quote.event_type || "Wedding",
      event_participant: quote.event_participant || "Both",
      payment_type: quote.payment_type || "full",
      event_date: eventDateTime ? eventDateTime.toISOString().split('T')[0] : "",
      event_time: eventDateTime ? format(eventDateTime, "HH:mm") : "10:00",
      delivery_date: deliveryDateTime ? deliveryDateTime.toISOString().split('T')[0] : "",
      delivery_time: deliveryDateTime ? format(deliveryDateTime, "HH:mm") : "09:00",
      return_date: returnDateTime ? returnDateTime.toISOString().split('T')[0] : "",
      return_time: returnDateTime ? format(returnDateTime, "HH:mm") : "18:00",
      venue_address: quote.venue_address || "",
      groom_name: quote.groom_name || "",
      groom_whatsapp: quote.groom_whatsapp || "",
      groom_address: quote.groom_address || "",
      bride_name: quote.bride_name || "",
      bride_whatsapp: quote.bride_whatsapp || "",
      bride_address: quote.bride_address || "",
      notes: quote.special_instructions || "",
    })
    
    setShowEditDialog(true)
  }

  // Save edited quote
  const handleSaveQuote = async () => {
    if (!selectedQuote) return

    try {
      setIsSaving(true)
      
      // Combine date and time into ISO strings
      const eventDate = editFormData.event_date && editFormData.event_time
        ? new Date(`${editFormData.event_date}T${editFormData.event_time}`).toISOString()
        : null
      
      const deliveryDate = editFormData.delivery_date && editFormData.delivery_time
        ? new Date(`${editFormData.delivery_date}T${editFormData.delivery_time}`).toISOString()
        : null
      
      const returnDate = editFormData.return_date && editFormData.return_time
        ? new Date(`${editFormData.return_date}T${editFormData.return_time}`).toISOString()
        : null

      // Determine which table to update
      const table = selectedQuote.booking_type === 'package' ? 'package_bookings' : 'product_orders'
      
      // Prepare update data
      const updateData: any = {
        event_type: editFormData.event_type,
        event_participant: editFormData.event_participant,
        payment_type: editFormData.payment_type,
        event_date: eventDate,
        delivery_date: deliveryDate,
        return_date: returnDate,
        venue_address: editFormData.venue_address,
        groom_name: editFormData.groom_name,
        groom_whatsapp: editFormData.groom_whatsapp,
        groom_address: editFormData.groom_address,
        bride_name: editFormData.bride_name,
        bride_whatsapp: editFormData.bride_whatsapp,
        bride_address: editFormData.bride_address,
        special_instructions: editFormData.notes,
        updated_at: new Date().toISOString(),
      }

      // Update the database
      const { error } = await supabase
        .from(table)
        .update(updateData)
        .eq('id', selectedQuote.id)

      if (error) throw error

      toast({
        title: "Success",
        description: "Quote updated successfully",
      })

      setShowEditDialog(false)
      await loadQuotes() // Refresh quotes list
    } catch (error) {
      console.error("Error updating quote:", error)
      toast({
        title: "Error",
        description: "Failed to update quote. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSaving(false)
    }
  }
