"use client"

// Clean minimal Create Product Order page.
// Rewritten due to prior file corruption. Focus: product_orders & product_order_items only.

import { useState, useEffect, useMemo } from "react"
import { supabase } from "@/lib/supabase"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { format } from "date-fns"
import { toast } from "sonner"

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover"
import { Calendar } from "@/components/ui/calendar"
import { CalendarIcon, ArrowLeft, Plus, Search, X, ShoppingCart, Loader2 } from "lucide-react"

interface Customer { id: string; name: string; phone: string; email?: string; address?: string; city?: string; state?: string; pincode?: string }
interface Product { id: string; name: string; category: string; rental_price: number; sale_price: number; security_deposit: number; stock_available: number; image_url?: string }
interface OrderItem { id: string; product_id: string; product_name: string; category: string; quantity: number; unit_price: number; total_price: number; security_deposit: number; stock_available: number }

export default function CreateProductOrderPage() {
  const router = useRouter()
  const [customers, setCustomers] = useState<Customer[]>([])
  const [products, setProducts] = useState<Product[]>([])
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [items, setItems] = useState<OrderItem[]>([])
  const [customerSearch, setCustomerSearch] = useState("")
  const [productSearch, setProductSearch] = useState("")
  const [loading, setLoading] = useState(false)
  const [showNewCustomer, setShowNewCustomer] = useState(false)
  const [newCustomer, setNewCustomer] = useState({ name: "", phone: "", email: "", address: "", city: "", state: "", pincode: "" })
  const [formData, setFormData] = useState({ 
    booking_type: "rental" as "rental" | "sale", 
    event_type: "Wedding", 
    event_participant: "Both",
    payment_type: "full" as "full"|"advance"|"partial", 
    custom_amount: 0, 
    event_date: "", 
    delivery_date: "", 
    return_date: "", 
    venue_address: "", 
    groom_name: "", 
    groom_whatsapp: "",
    groom_address: "",
    bride_name: "", 
    bride_whatsapp: "",
    bride_address: "",
    notes: "" 
  })

  // Load initial data
  useEffect(() => { (async () => { try { const [cust, prod] = await Promise.all([
    supabase.from("customers").select("*").order("name"),
    supabase.from("products").select("*").order("name"),
  ]); if (cust.error) throw cust.error; if (prod.error) throw prod.error; setCustomers(cust.data||[]); setProducts(prod.data||[]) } catch (e) { console.error(e); toast.error("Failed to load data") } })() }, [])

  const filteredCustomers = useMemo(()=> customers.filter(c => c.name.toLowerCase().includes(customerSearch.toLowerCase()) || c.phone.includes(customerSearch.trim())), [customers, customerSearch])
  const filteredProducts = useMemo(()=> products.filter(p => p.name.toLowerCase().includes(productSearch.toLowerCase())), [products, productSearch])

  const addProduct = (p: Product) => {
    if (p.stock_available <= 0) { toast.error("Out of stock"); return }
    const existing = items.find(i => i.product_id === p.id)
    const unit = formData.booking_type === "rental" ? p.rental_price : p.sale_price
    if (existing) { if (existing.quantity >= p.stock_available) { toast.error(`Only ${p.stock_available} available`); return } updateQuantity(existing.id, existing.quantity + 1); return }
    setItems(prev => [...prev, { id:`item-${p.id}-${Date.now()}`, product_id:p.id, product_name:p.name, category:p.category, quantity:1, unit_price:unit, total_price:unit, security_deposit: formData.booking_type === "rental" ? p.security_deposit : 0, stock_available:p.stock_available }])
  }

  const updateQuantity = (id:string, qty:number) => { setItems(prev => prev.map(it => { if (it.id !== id) return it; if (qty <= 0) return null as any; if (qty > it.stock_available) { toast.error(`Max ${it.stock_available}`); return it } return { ...it, quantity:qty, total_price: it.unit_price * qty, security_deposit: formData.booking_type === "rental" ? (it.security_deposit/it.quantity)*qty : 0 } }).filter(Boolean) as OrderItem[]) }
  const removeItem = (id:string) => setItems(prev => prev.filter(i => i.id !== id))

  // Adjust prices if type flips
  useEffect(()=> { setItems(prev => prev.map(it => { const prod = products.find(p=>p.id===it.product_id); if(!prod) return it; const unit = formData.booking_type === "rental" ? prod.rental_price : prod.sale_price; return { ...it, unit_price:unit, total_price: unit * it.quantity, security_deposit: formData.booking_type === "rental" ? prod.security_deposit * it.quantity : 0 } })) }, [formData.booking_type, products])

  const totals = useMemo(()=> { const subtotal = items.reduce((s,i)=>s+i.total_price,0); const deposit = items.reduce((s,i)=>s+i.security_deposit,0); const gst = subtotal * 0.05; const grand = subtotal + gst; let payable = grand; if(formData.payment_type === "advance") payable = grand*0.5; else if(formData.payment_type === "partial") payable = Math.min(grand, Math.max(0, formData.custom_amount)); return { subtotal, deposit, gst, grand, payable, remaining: grand - payable } }, [items, formData])

  const handleCreateCustomer = async () => { if(!newCustomer.name || !newCustomer.phone){ toast.error("Name & phone required"); return } try { const { data, error } = await supabase.from("customers").insert({ ...newCustomer, customer_code:`CUST${Date.now().toString().slice(-6)}`, franchise_id:"00000000-0000-0000-0000-000000000001" }).select().single(); if(error) throw error; setCustomers(c=>[...c,data]); setSelectedCustomer(data); setShowNewCustomer(false); setNewCustomer({ name:"", phone:"", email:"", address:"", city:"", state:"", pincode:"" }); toast.success("Customer created") } catch(e){ console.error(e); toast.error("Failed to create customer") } }

  const handleSubmit = async () => { if(!selectedCustomer){ toast.error("Select customer"); return } if(!formData.event_date){ toast.error("Event date required"); return } if(items.length===0){ toast.error("Add at least one product"); return } setLoading(true); try { const orderNumber = `ORD${Date.now().toString().slice(-8)}`; const { data: order, error } = await supabase.from("product_orders").insert({ order_number: orderNumber, customer_id: selectedCustomer.id, franchise_id:"00000000-0000-0000-0000-000000000001", booking_type: formData.booking_type, event_type: formData.event_type, payment_type: formData.payment_type, event_date: formData.event_date, delivery_date: formData.delivery_date||null, return_date: formData.return_date||null, venue_address: formData.venue_address, groom_name: formData.groom_name, bride_name: formData.bride_name, notes: formData.notes, tax_amount: totals.gst, subtotal_amount: totals.subtotal, total_amount: totals.grand, amount_paid: 0, pending_amount: totals.grand, status: "pending_payment" }).select().single(); if(error) throw error; const rows = items.map(it => ({ order_id: order.id, product_id: it.product_id, quantity: it.quantity, unit_price: it.unit_price, total_price: it.total_price, security_deposit: it.security_deposit })); const { error: itemsErr } = await supabase.from("product_order_items").insert(rows); if(itemsErr) throw itemsErr; toast.success("Product order created"); router.push("/bookings") } catch(e){ console.error(e); toast.error("Failed to create order") } finally { setLoading(false) } }

  return (<div className="min-h-screen bg-gray-50"><div className="max-w-7xl mx-auto p-6"><div className="flex items-center gap-4 mb-6"><Link href="/bookings"><Button variant="outline" size="sm"><ArrowLeft className="h-4 w-4 mr-2"/>Back</Button></Link><div><h1 className="text-2xl font-bold">Create Product Order</h1><p className="text-sm text-gray-600">Products only (rental & sale)</p></div></div><div className="grid grid-cols-1 lg:grid-cols-3 gap-6"><div className="lg:col-span-2 space-y-6"><Card><CardHeader><CardTitle className="flex items-center justify-between">Customer<Button size="sm" variant="outline" onClick={()=>setShowNewCustomer(true)}><Plus className="h-4 w-4 mr-1"/>New</Button></CardTitle></CardHeader><CardContent className="space-y-4"><div className="relative"><Search className="absolute left-3 top-3 h-4 w-4 text-gray-400"/><Input placeholder="Search customers..." value={customerSearch} onChange={e=>setCustomerSearch(e.target.value)} className="pl-10"/></div>{selectedCustomer? <div className="p-3 rounded-md bg-blue-50 border border-blue-200 flex items-start justify-between"><div><div className="font-medium text-blue-900">{selectedCustomer.name}</div><div className="text-xs text-blue-700">{selectedCustomer.phone}</div>{selectedCustomer.email && <div className="text-xs text-blue-600">{selectedCustomer.email}</div>}</div><Button size="sm" variant="ghost" onClick={()=>setSelectedCustomer(null)}><X className="h-4 w-4"/></Button></div> : customerSearch ? <div className="border rounded-md max-h-56 overflow-y-auto text-sm">{filteredCustomers.map(c => <button key={c.id} onClick={()=>setSelectedCustomer(c)} className="w-full text-left p-3 border-b last:border-b-0 hover:bg-muted"><div className="font-medium">{c.name}</div><div className="text-xs text-muted-foreground">{c.phone}</div></button>)}{filteredCustomers.length===0 && <div className="p-3 text-xs text-muted-foreground">No matches</div>}</div> : <div className="text-xs text-muted-foreground">Type to search customers</div>}</CardContent></Card><Card><CardHeader><CardTitle>Order Details</CardTitle></CardHeader><CardContent className="space-y-4 text-sm"><div className="grid sm:grid-cols-3 gap-4"><div><Label className="text-xs">Type</Label><Select value={formData.booking_type} onValueChange={v=>setFormData({...formData,booking_type:v as any})}><SelectTrigger className="mt-1"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="rental">Rental</SelectItem><SelectItem value="sale">Sale</SelectItem></SelectContent></Select></div><div><Label className="text-xs">Event</Label><Select value={formData.event_type} onValueChange={v=>setFormData({...formData,event_type:v})}><SelectTrigger className="mt-1"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="Wedding">Wedding</SelectItem><SelectItem value="Engagement">Engagement</SelectItem><SelectItem value="Reception">Reception</SelectItem><SelectItem value="Other">Other</SelectItem></SelectContent></Select></div><div><Label className="text-xs">Payment</Label><Select value={formData.payment_type} onValueChange={v=>setFormData({...formData,payment_type:v as any})}><SelectTrigger className="mt-1"><SelectValue/></SelectTrigger><SelectContent><SelectItem value="full">Full</SelectItem><SelectItem value="advance">50% Advance</SelectItem><SelectItem value="partial">Custom</SelectItem></SelectContent></Select>{formData.payment_type==="partial" && <Input type="number" min={0} value={formData.custom_amount} onChange={e=>setFormData({...formData,custom_amount:Number(e.target.value||0)})} className="mt-2" placeholder="Custom amount"/>}</div></div><div className="grid sm:grid-cols-2 gap-4"><div><Label className="text-xs">Event Date *</Label><Popover><PopoverTrigger asChild><Button variant="outline" className="w-full justify-start text-left mt-1"><CalendarIcon className="mr-2 h-4 w-4"/>{formData.event_date? format(new Date(formData.event_date),"dd/MM/yyyy") : "Select"}</Button></PopoverTrigger><PopoverContent className="w-auto p-0"><Calendar mode="single" selected={formData.event_date?new Date(formData.event_date):undefined} onSelect={d=>setFormData({...formData,event_date:d?.toISOString()||""})}/></PopoverContent></Popover></div><div><Label className="text-xs">Delivery Date</Label><Popover><PopoverTrigger asChild><Button variant="outline" className="w-full justify-start text-left mt-1"><CalendarIcon className="mr-2 h-4 w-4"/>{formData.delivery_date? format(new Date(formData.delivery_date),"dd/MM/yyyy") : "Select"}</Button></PopoverTrigger><PopoverContent className="w-auto p-0"><Calendar mode="single" selected={formData.delivery_date?new Date(formData.delivery_date):undefined} onSelect={d=>setFormData({...formData,delivery_date:d?.toISOString()||""})}/></PopoverContent></Popover></div></div><div className="grid sm:grid-cols-2 gap-4"><div><Label className="text-xs">Groom Name</Label><Input value={formData.groom_name} onChange={e=>setFormData({...formData,groom_name:e.target.value})} className="mt-1"/></div><div><Label className="text-xs">Bride Name</Label><Input value={formData.bride_name} onChange={e=>setFormData({...formData,bride_name:e.target.value})} className="mt-1"/></div></div><div><Label className="text-xs">Venue Address</Label><Textarea rows={2} value={formData.venue_address} onChange={e=>setFormData({...formData,venue_address:e.target.value})} className="mt-1"/></div><div><Label className="text-xs">Notes</Label><Textarea rows={2} value={formData.notes} onChange={e=>setFormData({...formData,notes:e.target.value})} className="mt-1"/></div></CardContent></Card><Card><CardHeader><CardTitle>Products</CardTitle></CardHeader><CardContent className="space-y-4"><div className="relative"><Search className="absolute left-3 top-3 h-4 w-4 text-gray-400"/><Input placeholder="Search products..." value={productSearch} onChange={e=>setProductSearch(e.target.value)} className="pl-10"/></div><div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">{filteredProducts.map(p=>{const unit=formData.booking_type==="rental"?p.rental_price:p.sale_price; return <div key={p.id} className="border rounded-lg p-4 flex flex-col text-sm"><div className="aspect-square bg-gray-100 rounded mb-3 flex items-center justify-center text-xs text-muted-foreground">{p.image_url? <img src={p.image_url} alt={p.name} className="w-full h-full object-cover rounded"/> : "No Image"}</div><div className="font-medium line-clamp-1" title={p.name}>{p.name}</div><div className="text-[11px] text-gray-600 mb-1">{p.category}</div><div className="text-xs mb-2 space-y-0.5"><div>₹{unit}</div><div className="text-gray-500">Stock: {p.stock_available}</div></div><Button size="sm" onClick={()=>addProduct(p)} disabled={p.stock_available<=0} className="mt-auto">{p.stock_available<=0?"Out of Stock":"Add"}</Button></div>})}{filteredProducts.length===0 && <div className="text-xs text-muted-foreground col-span-full p-4 border rounded">No products found</div>}</div></CardContent></Card></div><div className="space-y-6"><Card><CardHeader><CardTitle>Order Items</CardTitle></CardHeader><CardContent>{items.length===0? <div className="py-10 text-center text-sm text-muted-foreground"><ShoppingCart className="h-8 w-8 mx-auto mb-3 text-gray-300"/>No items added yet</div> : <div className="space-y-4">{items.map(it=> <div key={it.id} className="flex items-center justify-between border-b pb-2 gap-3"><div className="min-w-0"><div className="text-sm font-medium leading-none truncate" title={it.product_name}>{it.product_name}</div><div className="text-[11px] text-muted-foreground truncate">{it.category}</div></div><div className="flex items-center gap-2"><div className="flex items-center gap-1"><Button size="sm" variant="outline" onClick={()=>updateQuantity(it.id,it.quantity-1)}>-</Button><span className="text-sm w-5 text-center">{it.quantity}</span><Button size="sm" variant="outline" onClick={()=>updateQuantity(it.id,it.quantity+1)}>+</Button></div><span className="text-xs font-medium whitespace-nowrap">₹{it.total_price}</span><Button size="sm" variant="ghost" onClick={()=>removeItem(it.id)}><X className="h-4 w-4"/></Button></div></div>)}</div>}</CardContent></Card><Card><CardHeader><CardTitle>Totals</CardTitle></CardHeader><CardContent className="space-y-2 text-sm"><div className="flex justify-between"><span>Subtotal</span><span>₹{totals.subtotal.toFixed(2)}</span></div><div className="flex justify-between"><span>GST (5%)</span><span>₹{totals.gst.toFixed(2)}</span></div>{formData.booking_type==="rental" && <div className="flex justify-between"><span>Security Deposit</span><span>₹{totals.deposit.toFixed(2)}</span></div>}<div className="flex justify-between font-semibold pt-1 border-t"><span>Total</span><span>₹{totals.grand.toFixed(2)}</span></div>{formData.payment_type!=="full" && <><div className="flex justify-between text-xs"><span>Payable Now</span><span>₹{totals.payable.toFixed(2)}</span></div><div className="flex justify-between text-xs"><span>Remaining</span><span>₹{totals.remaining.toFixed(2)}</span></div></>}</CardContent></Card><Button className="w-full" disabled={loading} onClick={handleSubmit}>{loading? <><Loader2 className="h-4 w-4 mr-2 animate-spin"/>Saving...</> : "Create Order"}</Button></div></div></div><Dialog open={showNewCustomer} onOpenChange={setShowNewCustomer}><DialogContent className="sm:max-w-md"><DialogHeader><DialogTitle className="flex items-center justify-between w-full"><span>Add Customer</span><Button size="sm" variant="ghost" onClick={()=>setShowNewCustomer(false)}><X className="h-4 w-4"/></Button></DialogTitle></DialogHeader><div className="space-y-3 text-sm"><div><Label>Name *</Label><Input value={newCustomer.name} onChange={e=>setNewCustomer({...newCustomer,name:e.target.value})} className="mt-1"/></div><div><Label>Phone *</Label><Input value={newCustomer.phone} onChange={e=>setNewCustomer({...newCustomer,phone:e.target.value})} className="mt-1"/></div><div><Label>Email</Label><Input value={newCustomer.email} onChange={e=>setNewCustomer({...newCustomer,email:e.target.value})} className="mt-1"/></div><div><Label>Address</Label><Textarea rows={2} value={newCustomer.address} onChange={e=>setNewCustomer({...newCustomer,address:e.target.value})} className="mt-1"/></div><div className="grid grid-cols-3 gap-2"><div><Label className="text-xs">City</Label><Input value={newCustomer.city} onChange={e=>setNewCustomer({...newCustomer,city:e.target.value})} className="mt-1"/></div><div><Label className="text-xs">State</Label><Input value={newCustomer.state} onChange={e=>setNewCustomer({...newCustomer,state:e.target.value})} className="mt-1"/></div><div><Label className="text-xs">Pincode</Label><Input value={newCustomer.pincode} onChange={e=>setNewCustomer({...newCustomer,pincode:e.target.value})} className="mt-1"/></div></div><div className="flex justify-end gap-2 pt-2"><Button variant="outline" size="sm" onClick={()=>setShowNewCustomer(false)}>Cancel</Button><Button size="sm" onClick={handleCreateCustomer}>Save</Button></div></div></DialogContent></Dialog></div>)
}